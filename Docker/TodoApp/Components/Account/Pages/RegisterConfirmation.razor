@page "/Account/RegisterConfirmation"

@using System.Text
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities
@using TodoApp.Data

@inject UserManager<ApplicationUser> UserManager
@inject IEmailSender<ApplicationUser> EmailSender
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager
@inject SignInManager<ApplicationUser> SignInManager

<PageTitle>Register confirmation</PageTitle>

<div class="container mt-5">
    <div class="row justify-content-center">
        <div class="col-md-8 col-lg-6">
            <div class="card shadow">
                <div class="card-header bg-primary text-white">
                    <h3 class="mb-0">Register Confirmation</h3>
                </div>
                <div class="card-body">
                    <StatusMessage Message="@statusMessage"/>

                    <div class="text-center mb-4">
                        <i class="bi bi-envelope-check" style="font-size: 3rem; color: #0d6efd;"></i>
                        <h4 class="mt-3">Verify your email address</h4>
                        <p>Thank you for registering! Please verify your email to continue.</p>
                    </div>

                    @if (!string.IsNullOrEmpty(Email))
                    {
                        <p class="mb-3">A verification link has been sent to: <strong>@Email</strong></p>
                    }

                    @if (emailConfirmationLink is not null)
                    {
                        <div class="alert alert-info" role="alert">
                            <p>
                                This app does not currently have a real email sender registered.
                                Normally you would receive an email with a confirmation link.
                            </p>
                            <div class="d-grid gap-2">
                                <a href="@emailConfirmationLink" class="btn btn-primary">
                                    <i class="bi bi-check-circle me-2"></i>Verify Email Now
                                </a>
                            </div>
                        </div>
                    }
                    else if (!string.IsNullOrEmpty(Email))
                    {
                        <div class="alert alert-warning">
                            <p role="alert">Please check your email inbox for a verification link.</p>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private string? emailConfirmationLink;
    private string? statusMessage;

    [CascadingParameter] private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromQuery] private string? Email { get; set; }

    [SupplyParameterFromQuery] private string? ReturnUrl { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (Email is null)
        {
            RedirectManager.RedirectTo("");
        }

        var user = await UserManager.FindByEmailAsync(Email);
        if (user is null)
        {
            HttpContext.Response.StatusCode = StatusCodes.Status404NotFound;
            statusMessage = "Error finding user for unspecified email";
        }
        else if (EmailSender is IdentityNoOpEmailSender)
        {
            // Once you add a real email sender, you should remove this code that lets you confirm the account
            var userId = await UserManager.GetUserIdAsync(user);
            var code = await UserManager.GenerateEmailConfirmationTokenAsync(user);
            code = WebEncoders.Base64UrlEncode(Encoding.UTF8.GetBytes(code));
            emailConfirmationLink = NavigationManager.GetUriWithQueryParameters(
                NavigationManager.ToAbsoluteUri("Account/ConfirmEmail").AbsoluteUri,
                new Dictionary<string, object?> { ["userId"] = userId, ["code"] = code, ["returnUrl"] = ReturnUrl });
        }
    }

}